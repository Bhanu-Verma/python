# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11M_aV5kpEnf0GXX7BOyU_S9DKC3ic28F

# **Pandas**

1.Pandas is a Python library.

2.Pandas is used to analyze data.

3.Pandas is a Python library used for working with data sets.

4.It has functions for analyzing, cleaning, exploring, and manipulating data.
"""

import numpy as np   #import the entire numpy module with a short name as np
import pandas as pd  #import the entire pandas module with a short name as pd

import pandas as pd

print(pd.__version__)

"""What is a Series?

A Pandas Series is like a column in a table.

It is a one-dimensional array holding data of any type.
"""

#Create a simple Pandas Series from a list:
import pandas as pd

a = [1, 7, 2]

myvar = pd.Series(a)

print(myvar)

"""Labels

If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.

This label can be used to access a specified value.
"""

import pandas as pd

a = [1, 7, 2]

myvar = pd.Series(a)

print(myvar[0])

"""Create Labels

With the index argument, you can name your own labels.
"""

import pandas as pd

a = [1, 7, 2]

myvar = pd.Series(a, index = ["x", "y", "z"])

print(myvar)

#When you have created labels, you can access an item by referring to the label.
print(myvar["y"])

#Create a simple Pandas Series from a dictionary:
import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}

myvar = pd.Series(calories)

print(myvar)
#The keys of the dictionary become the labels.

#Create a Series using only data from "day1" and "day2":
import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}

myvar = pd.Series(calories, index = ["day1", "day2"])

print(myvar)

"""DataFrames

Data sets in Pandas are usually multi-dimensional tables, called DataFrames.

Series is like a column, a DataFrame is the whole table.
"""

import pandas as pd

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}

#load data into a DataFrame object:
df = pd.DataFrame(data)

print(df)

#use a list of indexes:
print(df.loc[[0, 1]])

import pandas as pd

mydataset = {
  'cars': ["BMW", "Volvo", "Ford"],
  'passings': [3, 7, 2]
}

myvar = pd.DataFrame(mydataset)

print(myvar)

"""Load Files Into a DataFrame


If your data sets are stored in a file, Pandas can load them into a DataFrame.
"""

import pandas as pd

df = pd.read_csv('/content/data.csv')

print(df)
#If you have a large DataFrame with many rows, Pandas will only return the first 5 rows, and the last 5 rows:

import pandas as pd

df = pd.read_csv('/content/data.csv')

print(df.to_string())



"""Viewing the Data

One of the most used method for getting a quick overview of the DataFrame, is the head() method.

The head() method returns the headers and a specified number of rows, starting from the top.
"""

import pandas as pd

df = pd.read_csv('data.csv')

print(df.head(10))

import pandas as pd

df = pd.read_csv('data.csv')

print(df.head())

print(df.tail())

print(df.info())

"""Data Cleaning

Data cleaning means fixing bad data in your data set.

Bad data could be:

Empty cells

Data in wrong format

Wrong data

Duplicates



"""

import pandas as pd

df = pd.read_csv('/content/data.csv')

new_df = df.dropna()

print(new_df.to_string())

#By default, the dropna() method returns a new DataFrame, and will not change the original.
#If you want to change the original DataFrame, use the inplace = True argument:
import pandas as pd

df = pd.read_csv('data.csv')

df.dropna(inplace = True)

print(df.to_string())
#Remove all rows with NULL values:

"""Replace Empty Values

Another way of dealing with empty cells is to insert a new value instead.

This way you do not have to delete entire rows just because of some empty cells.

The fillna() method allows us to replace empty cells with a value:
"""

import pandas as pd

df = pd.read_csv('/content/data.csv')

df.fillna(130, inplace = True)
print(df)
#print(df.to_string())
#Notice in the result: empty cells got the value 130 (in row 18, 22 and 28).

"""Replace Only For Specified Columns

The example above replaces all empty cells in the whole Data Frame.

To only replace empty values for one column, specify the column name for the DataFrame:
"""

import pandas as pd

df = pd.read_csv('data.csv')

df["Calories"].fillna(130, inplace = True)
print(df.to_string())

"""Replace Using Mean, Median, or Mode

A common way to replace empty cells, is to calculate the mean, median or mode value of the column.

Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column:
"""

import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].mean()

df["Calories"].fillna(x, inplace = True)

print(df.to_string())

#As you can see in row 18 and 28, the empty values from "Calories" was replaced with the mean: 304.68

import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].median()

df["Calories"].fillna(x, inplace = True)

print(df.to_string())

#As you can see in row 18 and 28, the empty values from "Calories" was replaced with the median: 291.2

import pandas as pd

df = pd.read_csv('data.csv')

x = df["Calories"].mode()[0]

df["Calories"].fillna(x, inplace = True)

print(df.to_string())

#As you can see in row 18 and 28, the empty value from "Calories" was replaced with the mode: 300.0

"""Data of Wrong Format

Cells with data of wrong format can make it difficult, or even impossible, to analyze data.

To fix it, you have two options: remove the rows, or convert all cells in the columns into the same format.


"""

import pandas as pd

df = pd.read_csv('/content/data.csv')

print(df.to_string())

df.loc[60, 'Duration'] = 40
print(df.to_string())

import pandas as pd

df = pd.read_csv('/content/data.csv')

for x in df.index:
  if df.loc[x, "Duration"] > 100:
    df.loc[x, "Duration"] = 90

print(df.to_string())

#Delete rows where "Duration" is higher than 100:
for x in df.index:
  if df.loc[x, "Duration"] > 100:
    df.drop(x, inplace = True)
print(df.to_string())

print(df.duplicated())

import pandas as pd

df = pd.read_csv('/content/data.csv')

print(df.corr())